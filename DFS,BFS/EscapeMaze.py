"""
동빈이는 N * M 크기의 직사각형 형태의 미로에 갇혀있다. 미로에는 여러 마리의 괴물이 있어 이를 피해 탈출해야 한다.
동빈이의 위치는 (1, 1)이고 미로의 출구는 (N, M)의 위치에 존재하며 한 번에 한 칸씩 이동할 수 있다.
이때 괴물이 있는 부분은 0으로, 괴물이 없는 부분은 1로 표시되어 있다. 미로는 반드시 탈출할 수 있는 형태로 제시된다.
이때 동빈이가 탈출하기 위해 움직여야 하는 최소 칸의 개수를 구하시오. 칸을 셀 때는 시작 칸과 마지막 칸을 모두 포함해서 계산한다.

입력
첫째 줄에 두 정수 N, M이 주어진다. 다음 N개의 줄에는 각각 M개의 정수로 미로의 정보가 주어진다.
각각의 수들은 공백 없이 붙어서 입력으로 제시된다. 또한 시작 칸과 마지막 칸은 항상 1이다.

출력
첫째 줄에 최소 이동 칸의 개수를 출력한다.
"""
n, m = map(int, input().split())
arr = []
for i in range(n):
    arr.append(list(map(int, input())))
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]
def bfs(x, y): # 시작노드에서 가까운 노드부터 차례대로 탐색하는 것으로 bfs로 푸는 것이 맞다.
    queue = []
    queue.append((x, y)) # 시작점을 큐에 넣는다.
    while queue:
        x, y = queue.pop(0) # 큐의 최하단에 있는 값(위치)를 뽑아온다..
        for k in range(4): # 상하좌우를 탐색한다.
            nx = x + dx[k]
            ny = y + dy[k]
            if nx >= 0 and nx < n and ny >= 0 and ny < m and arr[nx][ny] == 1: # 이동 가능한 인접한 노드가 있으면 큐에 쌓는다.
                arr[nx][ny] = arr[x][y] + 1 # 이동할 때마다 노드의 값을 1씩 늘린다.
                queue.append((nx, ny)) # 이동 가능한 노드를 큐에 쌓는다.
    return arr[n-1][m-1] # 탐색이 끝나고 끝지점의 값을 가져온다.

print(bfs(0, 0))
